- name: Install backend services
  hosts: backend
  become: true

  vars:
    login_host: db.praveen.store
    login_password: ExpenseApp@1

  tasks:
    - name: Disable default Nodejs
      ansible.builtin.command: dnf module disable nodejs -y

    - name: Enable Nodejs 20
      ansible.builtin.command: dnf module enable nodejs:20 -y

    - name: Install Nodejs
      ansible.builtin.dnf:
        name: "{{ item }}"
        state: installed
      loop:
        - nodejs
        - mysql

    - name: Add user expense
      ansible.builtin.user:
        name: expense

    - name: create a new directory 'app'
      ansible.builtin.file:
        path: /app
        state: directory

    - name: download backend code
      ansible.builtin.get_url:
        url: https://expense-builds.s3.us-east-1.amazonaws.com/expense-backend-v2.zip
        dest: /tmp/backend.zip

    - name: unarchive/unzip backend code
      ansible.builtin.unarchive:
        src: /tmp/backend.zip
        dest: /app
        remote_src: yes # by default checks in ansible server, so I am giving this so that it will check in remote server

    - name: download npm Dependencies
      ansible.builtin.command: npm install
      args:
        chdir: /app

    - name: copy backend service
      ansible.builtin.copy:
        src: backend.service
        dest: /etc/systemd/system/backend.service

    - name: daemon relaod
      ansible.builtin.systemd_service:
        daemon_reload: true

    - name: Install Python Mysql Dependencies for ansible
      ansible.builtin.pip:
        executable: pip3.9
        name: "{{ item }}"
      loop:
        - PyMySQL
        - cryptography

    - name: Load Schema
      community.mysql.mysql_db:
        login_user: root
        login_password: "{{ login_password }}"
        login_host: "{{ login_host }}"
        target: /app/schema/backend.sql
        state: import
        name: all

    - name: Restart backend
      ansible.builtin.service:
        name: backend
        state: started
        enabled: yes
